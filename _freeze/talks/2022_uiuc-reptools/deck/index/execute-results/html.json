{
  "hash": "ac93d5c7390694dd47dae6d3847da4e4",
  "result": {
    "markdown": "---\nfrom: markdown+emoji\nformat:\n  revealjs: \n    incremental: true \n    theme: [simple, custom.scss]\n    slide-number: true\n    show-slide-number: all\nhighlight-style: oblivion    \n---\n\n::: {.cell}\n\n:::\n\n\n::: columns\n::: {.column width=\"40%\"}\n::: {.absolute top=\"-3%\" left=\"-15%\" right=\"40%\"}\n::: {style=\"text-align: center\"}\n![](path.png)\n:::\n:::\n:::\n\n::: {.column width=\"60%\"}\n::: {style=\"text-align: right\"}\n## [From zero to hero: a researcher's path through data science tools for reproducibility]{style=\"color:#BA0C2F\"}\n:::\n\n&nbsp;&nbsp;&nbsp;&nbsp;  \n\n::: {style=\"text-align: right; font-size: 0.75em\"}\nLeonardo M. Bastos\\\nAssistant Professor\\\nIntegrative Precision Agriculture\n\n\n:::\n:::\n:::\n\n![](uga.png){.absolute left=62% top=72% width=450 height=200}\n\n# Reproducibility poll  \n\n## What is [reproducibility]{style=\"color:#BA0C2F\"}?\n\n\"Research is reproducible when others can reproduce the results of a scientific study given only the **original data, code, and documentation**\"   \n\n. . .  \n\nThis applies to:  \n\n- Other people reproducing your work  \n- Your future-self reproducing your past work  \n\n## Why bother with [reproducible science]{style=\"color:#BA0C2F\"}?\n\n- Tracks how and why of specific decisions and analysis  \n- Quickly modify analysis and figures  \n- Increased efficiency  \n- Rigor and transparency  \n- Increased citations (of paper, data, code)  \n\n## But is it really THAT important?  \nA [Nature survey](https://www.nature.com/articles/533452a) with ~1,600 researchers found that   \n\n- +70% of researchers have tried and failed to reproduce another scientist's experiments  \n\n- +50% have failed to reproduce their own experiments  \n\n- Main causes: selective reporting, weak stats, code/data unavailability, etc.   \n\n- [2006 Duke University cancer research case](https://rss.onlinelibrary.wiley.com/doi/full/10.1111/j.1740-9713.2011.00505.x)  \n\n\n# My own path on reproducible science: barriers and solutions  \n\n# :construction: Barrier #1: File naming and management  \n\n## \nStarting my M.Sc., this is how my file management system looked like:  \n\n::: columns  \n::: {.column width=\"60%\"}\n::: {style=\"text-align: center\"}\n![](msfiles.png){width=85%}  \n\n:::\n:::\n\n::: {.column width=\"40%\"}\n- Data, code, figures all mixed in same folder  \n- File names not very informative  \n- And this was just my first year! :scream:  \n- Looks familiar?  \n:::\n\n:::\n\n# :superhero: Solution #1: principled file naming and project management  \n\n## Three principles of file naming   \n[1. Machine readable]{style=\"color:#BA0C2F; font-size: 1.5em\"}  \n\n- contains key metadata, delimited with \"-\" and \"_\"   \n\n. . .  \n\n::: {style=\"text-align: center;\"} \n:x: [sas cumulative flux 2 years.xlsx]{style=\"color: red\"}  \n\n:white_check_mark: [2013-2014_N2O-cumulative.csv]{style=\"color: green\"}  \n\n:::\n\n- easy to search and filter  \n- easy to extract metadata   \n\n\n\n## Three principles of file naming   \n[2. Human readable]{style=\"color:#BA0C2F; font-size: 1.5em\"}  \n\n- name provides info on content, slug concept  \n\n. . .  \n\n::: columns\n::: {.column width=\"50%\"}\n::: {style=\"color: red\"}  \n:x:  \ndaily1.csv  \nanalysisyear1.qmd  \nfigure.png  \ndata2.csv  \nanova2.qmd  \nfigure2test.png\n:::\n:::  \n\n::: {.column width=\"50%\"}\n::: {.fragment}\n::: {style=\"color: green\"}  \n:white_check_mark:  \n2013-N2O-daily.csv  \n2013-N2O-daily-anova.qmd  \n2013-N2O-daily-plot.png\n2014-N2O-daily.csv  \n2014-N2O-daily-anova.qmd  \n2014-N2O-daily-plot.png\n:::\n:::\n:::\n:::\n. . .  \n\n::: {style=\"text-align: center; color:black\"}  \nWhich set of files do you want at 3 am before a deadline?  \n:::  \n\n\n## Three principles of file naming   \n[3. Plays well with default ordering]{style=\"color:#BA0C2F; font-size: 1.5em\"}  \n\n- Start name with something numerical (date, time, experiment number, etc.)  \n- For dates, use **YYYY-MM-DD** format  \n- Left pad numbers with zero  \n\n. . .  \n\n::: columns\n::: {.column width=\"50%\"}\n::: {style=\"color: red\"} \n:x:  \nN2O_daily_1-10-2013.csv  \n10-23-2013_N2O_daily.csv  \n2-15-2013_N2O_daily.csv  \n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n::: {style=\"color: green\"}\n:white_check_mark:  \n2013-01-10_N2O_daily.csv  \n2013-02-15_N2O_daily.csv  \n2013-10-23_N2O_daily.csv  \n:::\n:::\n:::\n:::\n\n## Principles of project management  \n::: columns\n::: {.column width=\"46%\"}\nFrom this:\n![](seeds-mixed.jpg)\n:::\n\n::: {.column width=\"54%\"}\nTo this:  \n![](seeds-organized.png)\n:::\n:::\n\n## Principles of project management  \n\n::: columns\n::: {.column width=\"60%\"}\n![](folders.png)\n:::\n\n::: {.column width=\"40%\"}\n- Create a minimum of three sub-folders: data, code, output  \n:::\n:::\n\n## Principles of project management  \n\n::: columns\n::: {.column width=\"60%\"}\n![](tree.png)\n:::\n\n::: {.column width=\"40%\"}\n::: {.nonincremental}\n- Create a minimum of three sub-folders: data, code, output  \n:::\n- Keep data files in `data`, script files in `code`, and tables and figures in `output`  \n\n- In RStudio, use [**RStudio Projects**]{style=\"color:#BA0C2F\"}!  \n:::\n:::\n\n# :construction: Barrier #2: Proprietary, point-and-click software  \n\n##\nAlso during my M.Sc., I was using multiple [**point-and-click**, **proprietary**]{style=\"color:#BA0C2F\"} software:\n\n::: {.nonincremental}\n-   [Excel]{style=\"color: green\"} for data organization/manipulation  \n-   [SAS]{style=\"color: blue\"} for stats  \n-   [SigmaPlot]{style=\"color: purple\"} for plots  \n-   [ArcGIS]{style=\"color: orange\"} for maps  \n:::\n. . .\n\n::: {.callout-warning}\n[**Proprietary**]{style=\"color:#BA0C2F\"} software and file extensions hamper reproducibility by imposing a paywall.\n:::  \n\n## Point-and-click is hard to document  \n\n- Point-and-click software is prone to [human error]{style=\"color:#BA0C2F\"}, and normally humans are not good at **documenting** each step we do.  \n\n- Think about the last time you [organized data in Excel]{style=\"color:#BA0C2F\"}. Do you remember each step you took when filtering or deleting cells, or when creating new columns? What was your decision-making process? \n\n- Or maybe each step you took to create a [complicated figure]{style=\"color:#BA0C2F\"}. How easy would it be for you to replicate it?  \n\n# :superhero: Solution #2: free programing languages  \n\n## Free and open-source software  \nWhenever possible and available, opt for [**free, open source**]{style=\"color:green\"} software.  \n\n::: columns\n::: {.column width=\"50%\"}\n::: {.nonincremental}\nInstead of this:  \n\n-   [Excel]{style=\"color: green\"}  \n-   [SAS]{style=\"color: blue\"}   \n-   [SigmaPlot]{style=\"color: purple\"}  \n-   [ArcGIS]{style=\"color: orange\"}  \n:::\n:::\n\n::: {.column width=\"50%\"}\nUse this:  \n\n-   [csv]{style=\"color: green\"}  \n-   [R/Python]{style=\"color: blue\"}   \n-   [R/Python]{style=\"color: purple\"}  \n-   [R/Python/QGIS]{style=\"color: orange\"}  \n:::\n:::\n## Code is documentation  \n\n::: {.cell}\n\n:::\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  plot   n2o_ppm\n1  101 0.7965260\n2  102 1.1163717\n3  103 1.7185601\n4  104 2.7246234\n5  105 0.6050458\n```\n:::\n:::\n\n\n. . .  \n  \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1|2|3|4\"}\ndf %>%\n  filter(n2o_ppm > 1) %>% # keeping only reasonable values\n  mutate(n2o_ppb = n2o_ppm*1000) %>% #transforming ppm to ppb\n  select(plot, n2o_ppb) # keeping only important columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  plot  n2o_ppb\n1  102 1116.372\n2  103 1718.560\n3  104 2724.623\n```\n:::\n:::\n\n\n. . .  \n\n::: {.callout-tip}  \nCode is in itself documentation of each step you do. Adding comments with `#` make it even more understandable.  \n:::\n\n# :construction: Barrier #3: Static programming and environment  \n\n## Static scripts with `.txt` or `.R`  \n::: {style=\"text-align: center\"}\n![](static.png){.absolute height=\"600\"}\n:::\n\n## Improvement: using an IDE  \n::: {style=\"text-align: center\"}\n![](ide2.png)\n:::\n\n# :superhero: Solution #3: Literate programming (and IDEs)  \n\n## Literate progamming  \n- Mixes code, output, and narrative on the same file  \n\n- Examples:  \n![](literate-opts.png){width=90%}  \n\n## quarto + RStudio  \n::: {style=\"text-align: center\"}  \n\n{{< video quarto+ide2.mp4 height=\"630\" width=\"1100\" >}}  \n\n\n:::  \n\n\n# :construction: Barrier #4: Keeping track of changes  \n\n## Can I go back in time?  \n::: {.fragment .fade-in-then-semi-out}  \n**Situation**: you spent the whole week working on an analysis, only to find out it didn't work as expected OR you got stuck with multiple bugs.  \n:::\n  \n::: {.fragment .fade-in-then-semi-out}  \n**Situation #2**: at some point your script had an important piece of code, but at the time you thought you didn't need it anymore and deleted those lines.  \n:::\n\n. . . \n\n[Wouldn't it be nice/useful/graduate-school-life-saving if you could simply go back in time and start fresh from your latest working version?]{style=\"color:#BA0C2F\"} \n\n# :superhero: Solution #4: Version control  \n\n## Welcome in, [version control]{style=\"color:#BA0C2F\"}  \n\n- Think of \"track changes\", but on any file type  \n- Especially useful for **script files** (.Rmd, .qmd)  \n- As your code grows and develops, snapshots are saved allowing you to retrieve different versions  \n- This connects your current-self with your past-self (what were I thinking when I decided on doing this step?)  \n\n- Locally (in your own machine), use  \n![](git2.png){.absolute left=62% top=65% width=300 height=100} \n\n\n# :construction: Barrier #5: Reproducibility requires sharing  \n\n## git works locally  \n- **git** is powerful on its own, but it only acts locally  \n- It becomes really powerful when we can have its features working online  \n- Working with it online also happens to be perfect for **collaboration and sharing**  :handshake:\n\n# :superhero: Solution #5: Open data and code  \n\n## Welcome in, [GitHub]{style=\"color:#BA0C2F\"}  \n- **GitHub** is an online centralized platform that combines **git**, **collaborative tools**, and **cloud storage**, all free :money_with_wings:  \n\n- You can choose if your projects hosted on GitHub (i.e., a repository) can be seen by **everyone (public)** or only by **you and invited collaborators (private)**  \n\n![](github.png){.absolute left=25% top=60% width=600 height=200}  \n  \n## GitHub demo  \n- I'll show you next one of my GitHub repositories  \n- This repository was used to conduct the entire analytic flow of a manuscript among 2 collaborators  \n- Both collaborators had local versions on their computers, and GitHub served as the \"merging\" point  \n\n. . .\n\n::: {style=\"text-align: center\"}\n<https://github.com/leombastos/BangPolder>\n:::\n\n# :construction: Barrier #6: What if software versions change?  \n\n## Things change  \n- Computer operating systems get updated  \n- R gets updated  \n- RStudio gets updated  \n- R packages get updated  \n\n. . . \n\n::: {style=\"text-align: center; color: #BA0C2F\"}  \nEven if we are working off of the same GitHub repository, our local software versions may differ, which can cause discrepancies and issues that may **impact reproducibility**.    \n:::  \n\n# :superhero: Solution #6: Containerization  \n\n## Containerizing projects  \n- To avoid discrepancies of software versions, we can use **containers**  \n- **Containers** keep track of all software versions in a project, and ship that project with those default versions  \n- This ensures the project is reproducible not only for **collaborators**, but also **your future self**   \n- One example of container software is ![](docker.png){.absolute left=65% top=60% width=300 height=200}   \n\n# In a nutshell  \n\n## :construction: :fast_forward: :superhero: Reproducible science is about...  {background-image=\"path.png\" background-opacity=\"0.2\"}\n- Using sensible **file names**  \n- Organizing files in sensible **sub-folders**  \n- Using **free programming language software**  \n- Using **literate programming** tools  \n- Using **version control locally**  \n- Using **distributed version control** to collaborate and share data and code  \n- Using **containers**    \n- Others (custom functions, iteration, code peer-review, etc.)  \n\n## Personal marketing   \n::: columns  \n::: {.column width=\"50%\"}\n- This entire presentation was made with **quarto**, and its source code is available on [my GitHub](https://github.com/leombastos/2022_talk_reptools)  \n\n- You can find more info on my lab's website (also made with **quarto**): [Bastos Lab](https://leombastos.github.io/bastoslab/) ![](logo.png){.absolute left=15% top=70% width=200 height=200}    \n:::\n\n::: {.column width=\"50%\"}\n- You can find my data science teaching material on my blog: [agRonomy](https://agronomy.netlify.app)  \n\n- Wish to learn and apply these concepts to your own research?  \n\n- [**Applications of data science in ag research**, Spring 2024]{style=\"color:#BA0C2F\"}\n\n- **Thanks!** :pray: :computer:\n:::  \n:::  \n\n::: {.fragment }  \n![](qrcode.png){.absolute top=71% left=95% width=200 height=200}  \n:::\n\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}